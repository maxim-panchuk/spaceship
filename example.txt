// package main

// import (
// 	"fmt"
// 	"net/http"
// 	"time"

// 	"github.com/gin-gonic/gin"
// 	"github.com/golang-jwt/jwt/v4"
// )

// func main() {
// 	router := gin.Default()

// 	router.POST("/sign-in", Signin)
// 	router.GET("/welcome", Welcome)
// 	router.GET("/refresh", Refresh)
// 	router.GET("/logout", Logout)

// 	router.Run("localhost:8080")
// }

// var jwtKey = []byte("my_secret_key")

// var users = map[string]string{
// 	"user1": "password1",
// 	"user2": "password2",
// }

// // Create the Signin handler
// func Signin(c *gin.Context) {
// 	creds := new(Credentials)
// 	// Get the JSON body and decode into credentials

// 	if err := c.BindJSON(creds); err != nil {
// 		c.IndentedJSON(http.StatusBadRequest, nil)
// 	}

// 	// Get the expected password from our in memory map
// 	expectedPassword, ok := users[creds.Username]

// 	// If a password exists for the given user
// 	// AND, if it is the same as the password we received, the we can move ahead
// 	// if NOT, then we return an "Unauthorized" status
// 	if !ok || expectedPassword != creds.Password {
// 		c.IndentedJSON(http.StatusUnauthorized, nil)
// 		return
// 	}

// 	// Declare the expiration time of the token
// 	// here, we have kept it as 5 minutes
// 	expirationTime := time.Now().Add(5 * time.Minute)
// 	// Create the JWT claims, which includes the username and expiry time
// 	claims := &Claims{
// 		Username: creds.Username,
// 		RegisteredClaims: jwt.RegisteredClaims{
// 			// In JWT, the expiry time is expressed as unix milliseconds
// 			ExpiresAt: jwt.NewNumericDate(expirationTime),
// 		},
// 	}

// 	// Declare the token with the algorithm used for signing, and the claims
// 	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
// 	// Create the JWT string
// 	tokenString, err := token.SignedString(jwtKey)
// 	if err != nil {
// 		// If there is an error in creating the JWT return an internal server error
// 		c.IndentedJSON(http.StatusInternalServerError, nil)
// 		return
// 	}

// 	// Finally, we set the client cookie for "token" as the JWT we just generated
// 	// we also set an expiry time which is the same as the token itself
// 	http.SetCookie(c.Writer, &http.Cookie{
// 		Name:    "token",
// 		Value:   tokenString,
// 		Expires: expirationTime,
// 	})
// }

// func Welcome(c *gin.Context) {
// 	// We can obtain the session token from the requests cookies, which come with every request
// 	ck, err := c.Cookie("token")
// 	if err != nil {
// 		if err == http.ErrNoCookie {
// 			// If the cookie is not set, return an unauthorized status
// 			c.IndentedJSON(http.StatusUnauthorized, nil)
// 			return
// 		}
// 		// For any other type of error, return a bad request status

// 		c.IndentedJSON(http.StatusBadRequest, nil)
// 		return
// 	}

// 	// Get the JWT string from the cookie
// 	// tknStr := c.Value

// 	// Initialize a new instance of `Claims`
// 	claims := &Claims{}

// 	// Parse the JWT string and store the result in `claims`.
// 	// Note that we are passing the key in this method as well. This method will return an error
// 	// if the token is invalid (if it has expired according to the expiry time we set on sign in),
// 	// or if the signature does not match
// 	tkn, err := jwt.ParseWithClaims(ck, claims, func(token *jwt.Token) (interface{}, error) {
// 		return jwtKey, nil
// 	})
// 	if err != nil {
// 		if err == jwt.ErrSignatureInvalid {
// 			c.IndentedJSON(http.StatusUnauthorized, nil)
// 			return
// 		}
// 		c.IndentedJSON(http.StatusBadRequest, nil)
// 		return
// 	}
// 	if !tkn.Valid {
// 		c.IndentedJSON(http.StatusUnauthorized, nil)
// 		return
// 	}
// 	// Finally, return the welcome message to the user, along with their
// 	// username given in the token

// 	c.IndentedJSON(http.StatusOK, fmt.Sprintf("Welcome %s!", claims.Username))
// }

// func Refresh(c *gin.Context) {
// 	// (BEGIN) The code until this point is the same as the first part of the `Welcome` route
// 	ck, err := c.Cookie("token")
// 	if err != nil {
// 		if err == http.ErrNoCookie {
// 			c.IndentedJSON(http.StatusUnauthorized, nil)
// 			return
// 		}
// 		c.IndentedJSON(http.StatusBadRequest, nil)
// 		return
// 	}
// 	claims := &Claims{}
// 	tkn, err := jwt.ParseWithClaims(ck, claims, func(token *jwt.Token) (interface{}, error) {
// 		return jwtKey, nil
// 	})
// 	if err != nil {
// 		if err == jwt.ErrSignatureInvalid {
// 			c.IndentedJSON(http.StatusUnauthorized, nil)
// 			return
// 		}
// 		c.IndentedJSON(http.StatusBadRequest, nil)
// 		return
// 	}
// 	if !tkn.Valid {
// 		c.IndentedJSON(http.StatusUnauthorized, nil)
// 		return
// 	}
// 	// (END) The code until this point is the same as the first part of the `Welcome` route

// 	// We ensure that a new token is not issued until enough time has elapsed
// 	// In this case, a new token will only be issued if the old token is within
// 	// 30 seconds of expiry. Otherwise, return a bad request status
// 	if time.Until(claims.ExpiresAt.Time) > 30*time.Second {
// 		c.IndentedJSON(http.StatusBadRequest, nil)
// 		return
// 	}

// 	// Now, create a new token for the current use, with a renewed expiration time
// 	expirationTime := time.Now().Add(5 * time.Minute)
// 	claims.ExpiresAt = jwt.NewNumericDate(expirationTime)
// 	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
// 	tokenString, err := token.SignedString(jwtKey)
// 	if err != nil {
// 		c.IndentedJSON(http.StatusInternalServerError, nil)
// 		return
// 	}

// 	// Set the new token as the users `token` cookie
// 	http.SetCookie(c.Writer, &http.Cookie{
// 		Name:    "token",
// 		Value:   tokenString,
// 		Expires: expirationTime,
// 	})
// }

// func Logout(c *gin.Context) {
// 	// immediately clear the token cookie
// 	http.SetCookie(c.Writer, &http.Cookie{
// 		Name:    "token",
// 		Expires: time.Now(),
// 	})
// }